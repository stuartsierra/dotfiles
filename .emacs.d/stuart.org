#+TITLE: Stuart Sierra's Emacs Configuration

Adapted from [[https://github.com/abedra/emacs.d][Aaron Bedra]] and [[https://github.com/cndreisbach/emacs.d][Clinton Dreisbach]]

* Preliminaries

** User details

   #+BEGIN_SRC emacs-lisp
     (setq user-full-name "Stuart Sierra")
     (setq user-mail-address "mail@stuartsierra.com")
   #+END_SRC

** Common Lisp extensions

   According to [[http://emacswiki.org/emacs/CommonLispForEmacs][Common Lisp for Emacs]], the ~cl~ package is deprecated
   in favor of ~cl-lib~.

   #+BEGIN_SRC emacs-lisp
     (require 'cl-lib)
   #+END_SRC

   But some packages still depend on the un-prefixed names in the old
   ~cl~ package, and for some reason it doesn't get loaded
   automatically.

   #+BEGIN_SRC emacs-lisp
     (require 'cl)
   #+END_SRC

   (I noticed this in the CIDER REPL when =M-p= didn't work because
   ~assert~ was not defined.)

* Package management (ELPA)

** Local elisp files

   #+BEGIN_SRC emacs-lisp :results silent
     (defvar stuart/local-dir (expand-file-name "local" user-emacs-directory))

     (add-to-list 'load-path stuart/local-dir)
   #+END_SRC

** Vendored packages

   The =~/.emacs.d/vendor= directory, and any directory in it, should
   be on the ~load-path~.

   Note: the =org-mode= directory is already added in =init.el= for
   bootstrapping.

   #+BEGIN_SRC emacs-lisp
     (defvar stuart/vendor-dir (expand-file-name "vendor" user-emacs-directory))

     (add-to-list 'load-path stuart/vendor-dir)

     (when (file-directory-p stuart/vendor-dir)
       (dolist (project (directory-files stuart/vendor-dir t "\\w+"))
         (when (file-directory-p project)
           (add-to-list 'load-path project))))
   #+END_SRC

** Repository setup

   See [[http://melpa.org/#/][MELPA]]

   I don't use the [[http://orgmode.org/elpa.html][Org Emacs lisp Package Archive]] because I want the
   8.3 beta version from Git.

   [[http://www.emacswiki.org/emacs/MarmaladeRepo][Marmalade]] is reported to have connectivity problems and out-of-date packages.

   #+BEGIN_SRC emacs-lisp
     (load "package")
     (package-initialize)
     (add-to-list 'package-archives
                  '("melpa-stable" . "https://stable.melpa.org/packages/") t)
     (add-to-list 'package-archives
                  '("melpa" . "http://melpa.milkbox.net/packages/") t)
   #+END_SRC

** Magit warning

   Magit displays a warning every time you install it unless you have this.

   #+BEGIN_SRC emacs-lisp
     (setq magit-last-seen-setup-instructions "1.4.0")
   #+END_SRC

** Default packages

   I have CIDER and clojure-mode in =vendor= but the [[http://melpa.org/#/cider][CIDER package]]
   depends on emacs 24.3 / pkg-info 0.4 / queue 0.1.1 / seq 1.9 / spinner 1.4

   #+BEGIN_SRC emacs-lisp :results silent
     (defvar stuart/stable-packages
       '(
         ag
         exec-path-from-shell
         find-file-in-project
         gh
         gist
         git-commit
         gnuplot
         go-eldoc
         go-mode
         graphviz-dot-mode
         ido-vertical-mode
         ledger-mode
         lua-mode
         magit
         markdown-mode
         multiple-cursors
         paredit
         pkg-info
         rainbow-delimiters
         ruby-mode
         s
         smex
         ))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :results silent
     (defvar stuart/unstable-packages
       '(
         async
         dash
         groovy-mode
         hlinum
         htmlize
         linum-off
         queue
         restclient
         seq
         spinner
         xml-rpc
         ))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :results silent
     (defvar stuart/packages
       (append stuart/stable-packages
               stuart/unstable-packages))
   #+END_SRC

** Pinned package repositories

*** Examples (not evaluated)

   Example from [[https://github.com/clojure-emacs/cider][CIDER]] README

   #+BEGIN_SRC emacs-lisp :eval no :tangle no
     (add-to-list 'package-pinned-packages '(cider . "melpa-stable") t)
   #+END_SRC

   Example from [[https://clojurians.slack.com/archives/cider/p1435848876001077][Slack]]

   #+BEGIN_SRC emacs-lisp :eval no :tangle no
     (when (boundp 'package-pinned-packages)
       (setq package-pinned-packages
             '((cider        . "melpa-stable")
               (clj-refactor . "melpa-stable")
               (clojure-mode . "melpa-stable")
               (paredit      . "melpa-stable")
               (magit        . "melpa-stable")
               (smex         . "melpa-stable")
               )))
   #+END_SRC

*** Pinning my stable packages

   #+BEGIN_SRC emacs-lisp :results silent
     (dolist (pkg stuart/stable-packages)
       (add-to-list 'package-pinned-packages
                    (cons pkg "melpa-stable") t))
   #+END_SRC

** Installing packages

   #+BEGIN_SRC emacs-lisp :results silent
     (defun stuart/all-packages-installed-p ()
       (cl-loop for pkg in stuart/packages
                when (not (package-installed-p pkg)) do (cl-return nil)
                finally (cl-return t)))

     (unless (stuart/all-packages-installed-p)
       (message "%s" "Refreshing package database...")
       (package-refresh-contents)
       (dolist (pkg stuart/packages)
         (when (not (package-installed-p pkg))
           (package-install pkg))))
   #+END_SRC

* PATH and environment

  from https://github.com/purcell/exec-path-from-shell

  #+BEGIN_SRC emacs-lisp
    (when (memq window-system '(mac ns))
      (exec-path-from-shell-initialize))
  #+END_SRC

* Global settings

** Splash screen

   #+BEGIN_SRC emacs-lisp
     (setq inhibit-splash-screen t
           initial-scratch-message nil)
   #+END_SRC

** Start in org mode

   #+BEGIN_SRC emacs-lisp :results silent
   (setq initial-major-mode 'org-mode)
   #+END_SRC

** Scroll, tool, and menu bars

   Check for symbol bindings, since some of these may not exist in
   text-only Emacs.

   #+BEGIN_SRC emacs-lisp
     (when (fboundp 'scroll-bar-mode)
       (scroll-bar-mode -1))
     (when (fboundp 'tool-bar-mode)
       (tool-bar-mode -1))
     (when (fboundp 'menu-bar-mode)
       (menu-bar-mode -1))
   #+END_SRC

** Selecting text more like GUI apps

   Except ~delete-selection-mode~

   #+BEGIN_SRC emacs-lisp
     (transient-mark-mode t)
     (setq x-select-enable-clipboard t)
   #+END_SRC

** Show empty lines

   #+BEGIN_SRC emacs-lisp
     (setq indicate-empty-lines t)
   #+END_SRC

** Single-character yes/no prompt

   #+BEGIN_SRC emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

** Faster keystroke feedback

   #+BEGIN_SRC emacs-lisp
     (setq echo-keystrokes 0.1)
   #+END_SRC

** Never use dialog boxes

   #+BEGIN_SRC emacs-lisp
     (setq use-dialog-box nil)
   #+END_SRC

** Visible bell

   Emacs 24.5.1 has a [[http://stuff-things.net/2015/10/05/emacs-visible-bell-work-around-on-os-x-el-capitan/][bug]] under OS X El Capitan, fixed in Emacs 25,
   that causes display artifacts when using the visible bell.

   This alternative from [[http://www.emacswiki.org/emacs/AlarmBell][EmacsWiki: Alarm Bell]] works:

   #+BEGIN_SRC emacs-lisp
     (defun my-visible-bell ()
       "Flash the mode line as a visible bell."
       (invert-face 'mode-line)
       (run-with-timer 0.2 nil 'invert-face 'mode-line))

     (setq visible-bell nil
           ring-bell-function #'my-visible-bell)
   #+END_SRC

** Always show parens

   #+BEGIN_SRC emacs-lisp
     (show-paren-mode t)
   #+END_SRC

* Editing text

** indent-region

   #+BEGIN_SRC emacs-lisp
     (defun indent-buffer ()
       (interactive)
       (indent-region (point-min) (point-max)))
   #+END_SRC

** unfill-region

   From http://www.emacswiki.org/emacs/UnfillRegion

   #+BEGIN_SRC emacs-lisp
     (defun unfill-region (beg end)
       "Unfill the region, joining text paragraphs into a single
       logical line. This is useful, e.g., for use with
       `visual-line-mode'."
       (interactive "*r")
       (let ((fill-column (point-max)))
         (fill-region beg end)))
   #+END_SRC

** zap-up-to-char

   #+BEGIN_SRC emacs-lisp
     (defun zap-up-to-char (arg char)
       "Kill up to but not including ARGth occurrence of CHAR.
     Case is ignored if `case-fold-search' is non-nil in the current buffer.
     Goes backward if ARG is negative; error if CHAR not found."
       (interactive "p\ncZap up to char: ")
       ;; Avoid "obsolete" warnings for translation-table-for-input.
       (with-no-warnings
         (if (char-table-p translation-table-for-input)
             (setq char (or (aref translation-table-for-input char) char))))
       (kill-region (point) (progn
                              (search-forward (char-to-string char) nil nil arg)
                                             ;                        (goto-char (if (> arg 0) (1- (point)) (1+ (point))))
                              (1- (point))))
       (goto-char (1- (point))))

     (global-unset-key "\M-z")
     (global-set-key "\M-z" 'zap-up-to-char)
   #+END_SRC

** Temporary buffer

   #+BEGIN_SRC emacs-lisp
     (defun temp-buffer ()
       (interactive)
       (switch-to-buffer "*temp*"))

     (global-set-key (kbd "C-c o t") 'temp-buffer)
   #+END_SRC

** Line numbering

   #+BEGIN_SRC emacs-lisp
     (require 'linum-off)
     (require 'hlinum)
   #+END_SRC

** Typographical punctuation

   From http://www.emacswiki.org/emacs/TypographicalPunctuationMarks

   #+BEGIN_SRC emacs-lisp
     (require 'typopunct)

     (defconst typopunct-ellipsis (decode-char 'ucs #x2026))
     (defconst typopunct-middot   (decode-char 'ucs #xB7)) ; or 2219

     (defun typopunct-insert-ellipsis-or-middot (arg)
       "Change three consecutive dots to a typographical ellipsis mark."
       (interactive "p")
       (cond
        ((and (= 1 arg)
              (eq (char-before) ?^))
         (delete-char -1)
         (insert typopunct-middot))
        ((and (= 1 arg)
              (eq this-command last-command)
              (looking-back "\\.\\."))
         (replace-match "")
         (insert typopunct-ellipsis))
        (t
         (self-insert-command arg))))

     (define-key typopunct-map "." 'typopunct-insert-ellipsis-or-middot)
   #+END_SRC

* IDO & SMEX

** IDO is built into Emacs.

   #+BEGIN_SRC emacs-lisp :results silent
     (require 'ido)
     (ido-mode t)
   #+END_SRC

** SMEX

   [[https://github.com/nonsequitur/smex/][github: nonsequitur/smex]]

   #+BEGIN_SRC emacs-lisp :results silent
     (require 'smex)
     (smex-initialize)
     (global-set-key (kbd "M-x") 'smex)
     (global-set-key (kbd "M-X") 'smex-major-mode-commands)
   #+END_SRC

* Window management

** rotate-windows

   from http://emacswiki.org/emacs/TransposeWindows

   #+BEGIN_SRC emacs-lisp
     (defun rotate-windows ()
       "Rotate your windows"
       (interactive)
       (cond
        ((not (> (count-windows) 1))
         (message "You can't rotate a single window!"))
        (t
         (let ((i 1)
               (num-windows (count-windows)))
           (while  (< i num-windows)
             (let* ((w1 (elt (window-list) i))
                    (w2 (elt (window-list) (+ (% i num-windows) 1)))
                    (b1 (window-buffer w1))
                    (b2 (window-buffer w2))
                    (s1 (window-start w1))
                    (s2 (window-start w2)))
               (set-window-buffer w1 b2)
               (set-window-buffer w2 b1)
               (set-window-start w1 s2)
               (set-window-start w2 s1)
               (setq i (1+ i))))))))
   #+END_SRC

** Switch windows like tabs

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "s-}") 'other-window)
     (global-set-key (kbd "s-{") (lambda () (interactive) (other-window -1)))
   #+END_SRC

* Org mode

** Org keybindings

   #+BEGIN_SRC emacs-lisp
     (org-defkey org-mode-map (kbd "RET") 'org-return-indent)
   #+END_SRC

** Copy URL from org-moge link

#+BEGIN_SRC emacs-lisp :results silent
  (defun org-copy-url-from-link ()
    (interactive)
    (let ((link-info (assoc :link (org-context))))
      (when link-info
        (let ((text (kill-new (buffer-substring-no-properties (or (cadr link-info) (point-min))
                                                              (or (caddr link-info) (point-max))))))
          (string-match org-bracket-link-regexp text)
          (kill-new (substring text (match-beginning 1) (match-end 1)))))))
#+END_SRC

** Org copy formatted text to clipboard

To paste formatted content into a rich-text application

#+BEGIN_SRC emacs-lisp :results silent
  (defun org-copy-formatted ()
    "Export visible region to HTML, then copy to clipboard as rich text."
    (interactive)
    (save-window-excursion
      (let* ((buf (org-export-to-buffer 'html "*Formatted Copy*" nil nil t t))
             (html (with-current-buffer buf (buffer-string))))
        (with-current-buffer buf
          (shell-command-on-region
           (point-min)
           (point-max)
           "textutil -stdin -format html -convert rtf -stdout | pbcopy"))
        (kill-buffer buf))))
#+END_SRC

Adapted from [[http://kitchingroup.cheme.cmu.edu/blog/2016/06/16/Copy-formatted-org-mode-text-from-Emacs-to-other-applications/][kitchingroup.cheme.cmu.edu]] [[http://kitchingroup.cheme.cmu.edu/copying.html][CC-BY-SA 4.0]].

** Org-babel copy-and-paste to shell

   #+BEGIN_SRC emacs-lisp
     (defun org-babel-copy ()
       (interactive)
       (let ((body (org-babel-expand-src-block)))
         (kill-new body)))
   #+END_SRC

** Org-babel and Graphviz

   See [[http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-dot.html][Dot Source Code Blocks in Org Mode]]

   #+BEGIN_SRC emacs-lisp :results silent
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((dot . t))) ; this line activates dot
   #+END_SRC

   Tell Org that "dot" source should be rendered in ~graphviz-dot-mode~:

   #+BEGIN_SRC emacs-lisp :results silent
   (add-to-list 'org-src-lang-modes (quote ("dot" . graphviz-dot)))
   #+END_SRC

** Org-babel and Clojure (CIDER)

   See [[http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-clojure.html][Org-babel-clojure]]

   My custom Clojure evaluation. Works with Org 8.3.2 and CIDER 0.10.0

   Adapted from ~ob-clojure.el~ in the org-mode distribution.
   ~cider-nrepl-sync-request:eval~ comes from [[file:~/dotfiles/submodules/cider/cider-client.el::(defun%20cider-nrepl-sync-request:eval%20(input%20&optional%20ns)][cider-client.el]] in CIDER

   #+BEGIN_SRC emacs-lisp :results silent
     (require 'cider)

     (defvar org-babel-default-header-args:clojure '())
     (defvar org-babel-header-args:clojure '((package . :any)))

     (defun org-babel-expand-body:clojure (body params)
       "Expand source code BODY according to PARAMS, return the
     expanded body."
       (let* ((vars (mapcar #'cdr (org-babel-get-header params :var)))
              (result-params (cdr (assoc :result-params params)))
              (print-level nil)
              (print-length nil)
              (body (org-babel-trim
                     (if (> (length vars) 0)
                         (concat "(let ["
                                 (mapconcat
                                  (lambda (var)
                                    (format "%S (quote %S)" (car var) (cdr var)))
                                  vars "\n      ")
                                 "]\n" body ")")
                       body))))
         (if (or (member "code" result-params) (member "pp" result-params))
             (format (concat "(clojure.pprint/with-pprint-dispatch clojure.pprint/%s-dispatch "
                             "(clojure.pprint/pprint (do %s))) ")
                     (if (member "code" result-params) "code" "simple")
                     body)
           body)))

     (defun nrepl-error-p (nrepl-result)
       "True if nrepl-result contains an error status."
       (member "eval-error" (nrepl-dict-get nrepl-result "status")))

     (defun org-babel-execute:clojure (body params)
       "Execute a block of Clojure code with Babel."
       (when (not (cider-current-connection))
         (error "No CIDER connection"))
       (let ((expanded (org-babel-expand-body:clojure body params))
             result)
         (let ((result-params (cdr (assoc :result-params params)))
               (nrepl-result (cider-nrepl-sync-request:eval expanded)))
           ;; handle errors, show result
           (if (nrepl-error-p nrepl-result)
               (nrepl-dict-get nrepl-result "err")
             (progn
               (setq result
                     (nrepl-dict-get
                      nrepl-result
                      (if (or (member "output" result-params)
                              (member "pp" result-params)
                              (member "code" result-params))
                          "out"
                        "value")))
               ;; Maybe parse result into table
               (org-babel-result-cond result-params
                 result
                 (condition-case nil (org-babel-script-escape result)
                   (error "%s" result))))))))

     (provide 'ob-clojure)
   #+END_SRC

** Org-babel and Clojure (inf-clojure)

#+BEGIN_SRC emacs-lisp :results silent
  (require 'inf-clojure)
#+END_SRC

** Org-babel and [[http://plantuml.com/][PlantUML]]

#+BEGIN_SRC emacs-lisp :results silent
  (setq org-plantuml-jar-path "/usr/local/Cellar/plantuml/1.2017.16/libexec/plantuml.jar")

  (defun stuart/safe-display-inline-images ()
    (condition-case nil
        (org-display-inline-images)
      (error nil)))

  (add-hook 'org-babel-after-execute-hook 'stuart/safe-display-inline-images 'append)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((plantuml . t)))
#+END_SRC

** Day pages

   See [[http://almostobsolete.net/daypage.html][A day page for Org-Mode - AlmostObsolete.net]]

   #+BEGIN_SRC emacs-lisp
     (require 'org)
     (require 'org-clock)
     (require 'org-faces)

     (add-hook 'org-mode-hook 'auto-fill-mode)

     (when (fboundp 'set-word-wrap)
       (add-hook 'org-mode-hook 'set-word-wrap))

     (setq stuart/daypage-path "~/Documents/daypage/")

     (defvar stuart/daypage-default-project nil)
     (defvar stuart/daypage-default-tags nil)

     (defun stuart/find-daypage (&optional date)
       "Go to the day page for the specified date,
        or toady's if none is specified."
       (interactive (list
                     (org-read-date "" 'totime nil nil
                                    (current-time) "")))
       (setq date (or date (current-time)))
       (let* ((file (expand-file-name
                     (concat stuart/daypage-path
                             (format-time-string "daypage-%Y-%m-%d-%a" date) ".org")))
              (buffer (find-buffer-visiting file)))
         (if buffer
             (switch-to-buffer buffer)
           (find-file file))
         (when (= 0 (buffer-size))
           (let ((datestr (format-time-string "%Y-%m-%d %A" date)))
             ;; Insert an initial heading for the page
             (insert datestr)
             (when stuart/daypage-default-project
               (insert " : " stuart/daypage-default-project "\n\n")
               (insert "* " stuart/daypage-default-project)
               (when stuart/daypage-default-tags
                 (org-set-tags-to stuart/daypage-default-tags)))))))

     (defun stuart/todays-daypage ()
       "Go straight to today's day page without prompting for a date."
       (interactive)
       (stuart/find-daypage))

     (defun stuart/my-agenda ()
       (interactive)
       (org-agenda nil "n"))
   #+END_SRC

** Daypage directories

#+BEGIN_SRC emacs-lisp :results silent
  (defun stuart/find-daypage-dir (&optional date)
    "Go to the directory of related files for the specified date,
    or today's if none is specified."
    (interactive (list
                  (org-read-date "" 'totime nil nil
                                 (current-time) "")))
    (setq date (or date (current-time)))
    (let* ((dir (expand-file-name
                 (concat stuart/daypage-path
                         (format-time-string "daypage-%Y-%m-%d-%a" date))))
           (buffer (find-buffer-visiting dir)))
      (mkdir dir t)
      (if buffer
          (switch-to-buffer buffer)
        (find-file dir))))
#+END_SRC

** Abbreviations and templates for org-mode

   Mode-specific versions of the built-in ~<e~ and ~<s~ abbreviations:

   #+BEGIN_SRC emacs-lisp :results silent
     (push '("clj" "#+BEGIN_SRC clojure :results silent\n?\n#+END_SRC")
           org-structure-template-alist)
     (push '("cljp" "#+BEGIN_SRC clojure :results pp code\n?\n#+END_SRC")
           org-structure-template-alist)
     (push '("el" "#+BEGIN_SRC emacs-lisp :results silent\n?\n#+END_SRC")
           org-structure-template-alist)
     (push '("sh" "#+BEGIN_SRC shell-script :results silent\n?\n#+END_SRC")
           org-structure-template-alist)
   #+END_SRC

** Inserting links

   #+BEGIN_SRC emacs-lisp :results silent
     (defun stuart/org-insert-link (url description)
       (insert "[[" url "][" description "]]"))

     (defconst pivotal-story-regex
       "^\\(https://www\\.pivotaltracker\\.com/story/show/\\|#\\)\\([0-9]+\\)")

     (defun org-insert-pivotal-link (story-id-or-url)
       (interactive "sPivotal Tracker story ID or URL: ")
       (when (null (string-match pivotal-story-regex story-id-or-url))
         (error "Invalid Pivotal Tracker story ID or URL '%s'"
                story-id-or-url))
       (let ((story-id (match-string 2 story-id-or-url)))
         (stuart/org-insert-link
          (concat "https://www.pivotaltracker.com/story/show/"
                  story-id)
          (concat "#" story-id))))
   #+END_SRC

* Calc spreadsheet and math

** Units for Bytes

   #+BEGIN_SRC emacs-lisp :results silent
     (setq math-additional-units
           '((GiB "1024 * MiB" "Giga Byte")
             (MiB "1024 * KiB" "Mega Byte")
             (KiB "1024 * B" "Kilo Byte")
             (B nil "Byte")
             (Gib "1024 * Mib" "Giga Bit")
             (Mib "1024 * Kib" "Mega Bit")
             (Kib "1024 * b" "Kilo Bit")
             (b "B / 8" "Bit")))
     (setq math-units-table nil)
   #+END_SRC

* Global keybindings

** find-file-in-project

   #+BEGIN_SRC emacs-lisp :results silent
     (global-set-key (kbd "C-x M-f") 'find-file-in-project)
   #+END_SRC

** Text scale increase/decrease

   Use SUPER (Windows or Command key) with + - 0 like in a web browser.

   Ignore whether we're pressing the SHIFT key.

   #+BEGIN_SRC emacs-lisp
     (defun text-scale-reset ()
       "Disables text scaling (zoom)"
       (interactive)
       (text-scale-set 0))

     (global-set-key (kbd "s-=") 'text-scale-increase)
     (global-set-key (kbd "s--") 'text-scale-decrease)
     (global-set-key (kbd "s-0") 'text-scale-reset)
     (global-set-key (kbd "s-+") 'text-scale-increase)
     (global-set-key (kbd "s-_") 'text-scale-decrease)
     (global-set-key (kbd "s-)") 'text-scale-reset)
   #+END_SRC

** Magit

   #+BEGIN_SRC emacs-lisp
     (require 'magit)
     (global-set-key (kbd "C-x m") 'magit-status)
   #+END_SRC

** Org daypage and agenda

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c o n") 'stuart/todays-daypage)
     (global-set-key (kbd "C-c o N") 'stuart/find-daypage)
     (global-set-key (kbd "C-c o a") 'stuart/my-agenda)
   #+END_SRC

** Prevent minimize or suspend with Ctrl-Z

   #+BEGIN_SRC emacs-lisp
     (global-unset-key (kbd "C-z"))
   #+END_SRC

* Programming

** Hide-show mode

   #+BEGIN_SRC emacs-lisp
     (require 'hideshow)

     (defvar hs-hiding-all-enabled nil)

     (defun hs-toggle-hiding-all ()
       (interactive)
       (if hs-hiding-all-enabled
           (hs-show-all)
         (hs-hide-all))
       (setq hs-hiding-all-enabled (not hs-hiding-all-enabled)))

     (defun enable-hs-minor-mode ()
       (hs-minor-mode 1)
       (make-local-variable 'hs-hiding-all-enabled)
       (local-set-key (kbd "C-c C-s") 'hs-toggle-hiding)
       (local-set-key (kbd "C-c C-S-s") 'hs-toggle-hiding-all))
   #+END_SRC

** Emacs Lisp

   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
     (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)
     (add-hook 'emacs-lisp-mode-hook 'subword-mode)
     (add-hook 'emacs-lisp-mode-hook 'enable-hs-minor-mode)
   #+END_SRC

** Clojure

*** clojure-mode

   #+BEGIN_SRC emacs-lisp
     (defun stuart/clojure-mode-connect-repl ()
       "Enable the minor mode for either CIDER or inf-clojure,
       whichever is currently running."
       (cond
        ((cider-connected-p) (cider-mode))
        ((inf-clojure-connected-p) (inf-clojure-minor-mode))
        (t (message "No Clojure REPL connected"))))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist
                  '("\\.cljs$" . clojure-mode)
                  '("\\.edn$" . clojure-mode))

     (add-hook 'clojure-mode-hook 'stuart/clojure-mode-connect-repl)
     (add-hook 'clojure-mode-hook 'paredit-mode)
     (add-hook 'clojure-mode-hook 'clojure-paredit-setup)
     (add-hook 'clojure-mode-hook 'subword-mode)
     (add-hook 'clojure-mode-hook 'enable-hs-minor-mode)
     (add-hook 'clojure-mode-hook 'eldoc-mode)
   #+END_SRC

*** Custom Clojure indentation rules

#+BEGIN_SRC emacs-lisp :results silent
  (define-clojure-indent
    (for-all :defn)
    (fdef :defn))
#+END_SRC

*** CIDER

#+BEGIN_SRC emacs-lisp :results silent
(add-hook 'cider-repl-mode-hook #'paredit-mode)
#+END_SRC

*** Disable CIDER "words of inspiration"

#+BEGIN_SRC emacs-lisp :results silent
(setq cider-words-of-inspiration ())
#+END_SRC

*** inf-clojure mode

   #+BEGIN_SRC emacs-lisp :results silent
     (require 'inf-clojure)
     (require 'paredit)
     (require 'clojure-mode)

     (defun disable-comint-autoexpand ()
       (setq comint-input-autoexpand nil))

     (add-hook 'inf-clojure-mode-hook 'paredit-mode)
     (add-hook 'inf-clojure-mode-hook 'clojure-paredit-setup)
     (add-hook 'inf-clojure-mode-hook 'subword-mode)
     (add-hook 'inf-clojure-mode-hook 'disable-comint-autoexpand)
   #+END_SRC

*** inf-clojure to socket

Comint mode can bind directly to a socket, no intermediate program
required. Great for socket-REPL!

#+BEGIN_SRC emacs-lisp :results silent
  (defun inf-clojure-socket (host port)
    (interactive (list (read-string "Host: " nil nil "localhost" nil)
                       (read-number "Port: " 5555)))
    (inf-clojure (cons host port)))
#+END_SRC

*** Copy name of current namespace

    #+BEGIN_SRC emacs-lisp
      (defun cider-copy-current-ns ()
        "Copies the name of the current Clojure namespace to the kill
      ring."
        (interactive)
        (let ((ns (cider-current-ns)))
          (kill-new ns)
          (message ns)))

      (define-key clojure-mode-map (kbd "C-c M-k") 'cider-copy-current-ns)
    #+END_SRC

*** Evaluate expressions in current REPL

As if they had been typed into the REPL buffer.

#+BEGIN_SRC emacs-lisp :results silent
  (defun stuart/cider-eval-in-repl (expr)
    "Evaluates EXPR by switching to the CIDER REPL buffer and
  inserting it, followed by a return."
    (interactive "sEval in REPL: ")
    (cider-switch-to-repl-buffer)
    (cider-repl-next-prompt)
    (insert expr)
    (cider-repl-return))
#+END_SRC

*** ~reset~ in current REPL

#+BEGIN_SRC emacs-lisp :results silent
  (defun stuart/save-clojure-buffers ()
    (interactive)
    (save-some-buffers t (lambda ()
                           (string-match "\\.\\(clj[sc]?\\|edn\\)$"
                                         (buffer-file-name)))))

  (defun stuart/cider-reset ()
    "Evaluates (reset) in the current CIDER REPL buffer."
    (interactive)
    (stuart/save-clojure-buffers)
    (stuart/cider-eval-in-repl "(reset)"))

  (global-unset-key (kbd "s-r"))
  (global-set-key (kbd "s-r") 'stuart/cider-reset)
#+END_SRC

*** Searching for occurances of a symbol

#+BEGIN_SRC emacs-lisp :results silent
  (defconst stuart/clojure-symbol-invalid-characters
    "][;@`~,\s\t\n\r\"\'\\^\(\)\{\}\\")

  (defconst stuart/clojure-symbol-invalid-first-character
    (concat stuart/clojure-symbol-invalid-characters ":0-9"))

  (defconst stuart/clojure-bare-symbol-regexp
    (concat "[^" stuart/clojure-symbol-invalid-first-character
            "][^" stuart/clojure-symbol-invalid-characters "]*"))

  (defconst stuart/clojure-qualified-symbol-regexp
    (concat "\\(" stuart/clojure-bare-symbol-regexp
            "/\\)?\\(" stuart/clojure-bare-symbol-regexp "\\)"))

  (defun stuart/clojure-unqualified-symbol-at-point ()
    "Returns the string name of the Clojure symbol at point,
  omitting any namespace-qualifying prefix."
    (let ((sym (thing-at-point 'symbol t)))
      (string-match stuart/clojure-qualified-symbol-regexp sym)
      (match-string 2 sym)))

  (defun clojure-grep-symbol-at-point (regexp &optional dir confirm)
    "Runs recursive grep for the current Clojure symbol at point,
  ignoring any namespace-qualifier prefix."
    (interactive
     (let* ((regexp (read-regexp
                     "Search for"
                     (regexp-quote (clojure-unqualified-symbol-at-point))))
            (dir (read-directory-name "Base directory: "
                                      nil default-directory t))
            (confirm (equal current-prefix-arg '(4))))
       (list regexp dir confirm)))
    (rgrep regexp "*.clj*" dir confirm))
#+END_SRC

* Emacs server

  #+BEGIN_SRC emacs-lisp
    (server-start)
  #+END_SRC

* Eshell

** Prompt

   #+BEGIN_SRC emacs-lisp :results silent
     (require 'eshell)

     (defun stuart/eshell-prompt ()
       "Eshell prompt function that prints PWD without full path"
       (concat (file-name-nondirectory (eshell/pwd))
               (if (= (user-uid) 0) " # " " $ ")))

     (setq eshell-prompt-function 'stuart/eshell-prompt)
   #+END_SRC

* Quick statistics on region

  #+BEGIN_SRC emacs-lisp :results silent
    (defun numbers-in-region ()
      (let ((numbers ()))
        (save-excursion
          (when (< (mark) (point))
            (exchange-point-and-mark))
          (while (re-search-forward "-?[0-9]+\\(\\.[0-9]+\\)?" (mark) t)
            (push (string-to-number (match-string 0)) numbers))
          (nreverse numbers))))

    (defun mean (numbers)
      (/ (float (apply '+ numbers)) (length numbers)))

    (defun mean-in-region ()
      (interactive)
      (let ((m (mean (numbers-in-region))))
        (kill-new (number-to-string m))
        (message (format "Mean: %f" m))))
  #+END_SRC

* Themes

  #+BEGIN_SRC emacs-lisp
    (add-to-list 'custom-theme-load-path (expand-file-name "themes" user-emacs-directory))
    (load-theme 'twilight-stuart t)
  #+END_SRC

* OS X extensions

  #+BEGIN_SRC emacs-lisp
    (when (fboundp 'tabbar-mode) (tabbar-mode -1))

    (when (boundp 'osx-key-mode-map)
      (define-key osx-key-mode-map (kbd "C-;") nil))

    ;; from https://gist.github.com/1297644
    (defun finder (location)
      "Fire up finder in a location relative to pwd."
      (interactive "sOpen finder at this location (relative to pwd): ")
      (start-process "finder" "findxer" "open" "-a" "Finder.app" location))

    ;; Has to come late in the initialization process
    (when (display-graphic-p)
      (menu-bar-mode 1))

    ;; Fix Unicode character spacing; see http://stackoverflow.com/q/8779351
    (when (string-equal system-type "darwin")
      (set-fontset-font "fontset-default"
                        'unicode
                        '("Menlo" . "iso10646-1")))
  #+END_SRC

* Local extensions

  Customizations that are local to this computer.

  #+BEGIN_SRC emacs-lisp
    (let ((local-config (expand-file-name "local.el" user-emacs-directory)))
      (when (file-exists-p local-config)
        (load local-config)))
  #+END_SRC
